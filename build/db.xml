<project name="argilla_db" basedir="." default="clean">

  <property name="dbConfigFilePath" value="protected/config/db.php"/>
  <property name="dbSchemaLocation" value=".sql/schema.sql"/>
  <property name="sqlFolder" value=".sql"/>

  <taskdef name="parseDbConfig" classname="build.tasks.ParseDbConfigTask"/>

  <taskdef name="fixSchema" classname="build.tasks.FixSchemaTask"/>
  <taskdef name="fixDump" classname="build.tasks.FixDumpTask"/>
  <taskdef name="prepareSchema" classname="build.tasks.PrepareSchemaTask"/>
  <taskdef name="prepareDump" classname="build.tasks.PrepareSchemaTask"/>
  <!-- by now these two tasks are the same -->
  <taskdef name="changeTablePrefix" classname="build.tasks.ChangeTablePrefixTask"/>

  <taskdef name="checkdb" classname="build.tasks.CheckDbTask"/>

  <target name="getDbSettings">
    <parseDbConfig file="${dbConfigFilePath}"/>
    <checkDb triggers="true" views="true" routines="true" lockTables="true" tmpTables="true" innoDb="true"/>
  </target>

  <target name="createDb" depends="clean, getDbSettings" description="Create DB">
    <copy file="build/sql/create_db.sql" tofile="build/tmp/create_db.sql">
      <filterchain>
        <replaceregexp><regexp pattern="DB_NAME" replace="${db.dbname}"/></replaceregexp>
      </filterchain>
    </copy>
    <pdosqlexec url="${db.driver}:host=${db.host}" userid="${db.username}" password="${db.password}">
      <fileset dir="build/tmp">
        <include name="create_db.sql"/>
      </fileset>
    </pdosqlexec>
  </target>

  <target name="createDbTest" depends="getDbSettings" description="Create DB for tests">
    <copy file="build/sql/create_db.sql" tofile="build/tmp/create_db_test.sql">
      <filterchain>
        <replaceregexp><regexp pattern="DB_NAME" replace="${db.dbname}_test"/></replaceregexp>
      </filterchain>
    </copy>
    <pdosqlexec url="${db.driver}:host=${db.host}" userid="${db.username}" password="${db.password}">
      <fileset dir="build/tmp">
        <include name="create_db_test.sql"/>
      </fileset>
    </pdosqlexec>
  </target>

  <target name="createSchema" depends="getDbSettings" description="Create DB schema">
    <exec command="mysqldump --dump-date --routines --no-data -u${db.username} -p${db.password} -h${db.host} ${db.dbname} > ${dbSchemaLocation}"/>
    <changeTablePrefix file="${dbSchemaLocation}" originalPrefix="${db.prefix}" newPrefix="argilla_"/>
    <fixSchema file="${dbSchemaLocation}"/>
    <chmod file="${dbSchemaLocation}" mode="0666" />
  </target>

  <target name="applySchema" depends="getDbSettings" description="Apply DB schema">
    <if>
      <not><isset property="confirm"/></not>
      <then>
        <input propertyName="confirm" defaultValue="n" validArgs="y,n" message="All data will be deleted. Are you sure?"/>
      </then>
    </if>
    <if>
      <equals arg1="${confirm}" arg2="y"/>
      <then>
        <phingcall target="createDb"/>
        <phingcall target="dropTablesAll"/>

        <available file="${dbSchemaLocation}" property="schema_exists" value="1"/>
        <fail unless="schema_exists" message="Schema file does not exist in specified location (${dbSchemaLocation})"/>

        <copy file="${dbSchemaLocation}" tofile="build/tmp/schemaApplying.sql"/>
        <prepareSchema file="build/tmp/schemaApplying.sql"/>
        <changeTablePrefix file="build/tmp/schemaApplying.sql" originalPrefix="argilla_" newPrefix="${db.prefix}"/>

        <exec checkreturn="true" passthru="true" command="mysql -u${db.username} -p${db.password} -h${db.host} ${db.dbname} &lt; build/tmp/schemaApplying.sql"/>

        <if>
          <not><isset property="confirmTest"/></not>
          <then>
            <input propertyName="confirmTest" defaultValue="y" validArgs="y,n" message="Apply schema for tests' DB?"/>
          </then>
        </if>

        <if>
          <equals arg1="${confirmTest}" arg2="y"/>
          <then>
            <phingcall target="createDbTest"/>
            <exec checkreturn="true" passthru="true" command="mysql -u${db.username} -p${db.password} -h${db.host} ${db.dbname}_test &lt; build/tmp/schemaApplying.sql"/>
          </then>
        </if>

        <phingcall target="clean"/>
      </then>
    </if>
  </target>

  <target name="migrate" description="Apply migrations">
    <exec command="protected/yiic migrate --interactive=0" passthru="true"/>
  </target>

  <target name="applyDump" depends="getDbSettings" description="Apply DB dump">
    <if>
      <isset property="force"></isset>
      <then>
        <property name="confirm" value="y"/>
      </then>
      <else>
        <input propertyName="confirm" defaultValue="n" validArgs="y,n" message="All data will be deleted. Are you sure?"/>
      </else>
    </if>

    <if>
      <equals arg1="${confirm}" arg2="y"/>
      <then>
        <phingcall target="createDb"/>
        <phingcall target="dropTablesAll"/>

        <echo message="${db.prefix}"/>

        <php expression="str_replace('.sql/', '', implode('  ', glob('.sql/*')))" returnProperty="fileList"/>
        <echo message="${fileList}"/>

        <if>
          <not><isset property="dumpFileName"></isset></not>
          <then>
            <input message="Enter dump filename" defaultValue="${db.dbname}.sql" propertyName="dumpFileName"/>
          </then>
        </if>

        <available file="${sqlFolder}/${dumpFileName}" property="dump_exists" value="1"/>
        <fail unless="dump_exists" message="Dump file does not exists in specified location (${sqlFolder}/${dumpFileName})"/>
        <echo message="Dealing with dump '${sqlFolder}/${dumpFileName}', database '${db.dbname}'..."/>

        <if>
          <isset property="force"></isset>
          <then>
            <property name="applySure" value="y"/>
          </then>
          <else>
            <input propertyName="applySure" defaultValue="y" message="Are you sure?"/>
          </else>
        </if>

        <if>
          <equals arg1="${applySure}" arg2="y"/>
          <then>
            <copy file="${sqlFolder}/${dumpFileName}" tofile="build/tmp/dumpApplying.sql"/>

            <echo message="Preparing dump file..."/>
            <prepareDump file="build/tmp/dumpApplying.sql"/>

            <changeTablePrefix file="build/tmp/dumpApplying.sql" newPrefix="${db.prefix}"/>

            <echo message="Inserting into mysql..."/>
            <exec checkreturn="true" passthru="true" command="mysql -u${db.username} -p${db.password} -h${db.host} ${db.dbname} &lt; build/tmp/dumpApplying.sql"/>

            <phingcall target="clean"/>
          </then>
        </if>
      </then>
    </if>
  </target>

  <target name="createDump" depends="getDbSettings" description="Create DB dump">

    <if>
      <not><isset property="dumpFileName"/></not>
      <then>
        <input message="Enter dump filename" propertyName="dumpFileName" defaultValue="${db.dbname}.sql"/>
      </then>
    </if>

    <if>
      <available file="${sqlFolder}/${dumpFileName}"/>
      <then>
        <property name="dumpExists" value="1"/>
        <input message="File '${dumpFileName}' already exists. Overwrite?" propertyName="overwrite" defaultValue="y"/>
      </then>
    </if>

    <if>
      <or>
        <not>
          <isset property="dumpExists"/>
        </not>
        <equals arg1="${overwrite}" arg2="y"/>
      </or>
      <then>
        <exec command="mysqldump --dump-date --routines -u${db.username} -p${db.password} -h${db.host} ${db.dbname} > ${sqlFolder}/${dumpFileName}"/>
        <fixDump file="${sqlFolder}/${dumpFileName}" tablePrefix="${db.prefix}"/>
        <chmod file="${sqlFolder}/${dumpFileName}" mode="0666" />
      </then>
    </if>
  </target>

  <target name="revertSchema" description="Recover original schema">
    <echo message="git checkout -- .sql/schema.sql"/>
    <exec command="git checkout -- .sql/schema.sql" passthru="true"/>
  </target>

  <target name="dropTablesAll" depends="getDbSettings" >
    <echo message="Deleting existing tables..."/>

    <copy file="build/sql/show_tables.sql" tofile="build/tmp/show_tables.sql">
      <filterchain>
        <replaceregexp>
          <regexp pattern="DB_NAME" replace="${db.dbname}"/>
        </replaceregexp>
      </filterchain>
    </copy>

    <copy file="build/sql/use.sql" tofile="build/tmp/use.sql">
      <filterchain>
        <replaceregexp>
          <regexp pattern="DB_NAME" replace="${db.dbname}"/>
        </replaceregexp>
      </filterchain>
    </copy>

    <pdosqlexec url="${db.driver}:host=${db.host}" userid="${db.username}" password="${db.password}">
      <fileset dir="build/tmp" >
        <include name="show_tables.sql"/>
      </fileset>
      <formatter type="plain" outfile="build/tmp/table_list.sql" showheaders="false"/>
    </pdosqlexec>

    <copy file="build/tmp/table_list.sql" tofile="build/tmp/drop_table_list.sql">
      <filterchain>
        <replaceregexp>
          <regexp pattern="(\w+)" replace="DROP TABLE IF EXISTS `\1`;" ignoreCase="true"/>
        </replaceregexp>
      </filterchain>
    </copy>

    <pdosqlexec url="${db.driver}:host=${db.host};dbname=${db.dbname}" userid="${db.username}" password="${db.password}">
      <filelist dir="build" files="tmp/use.sql, sql/checks_off.sql, tmp/drop_table_list.sql, sql/checks_on.sql"/>
    </pdosqlexec>

    <delete file="build/tmp/use.sql" quiet="yes" failonerror="false"/>
    <delete file="build/tmp/table_list.sql" quiet="yes" failonerror="false"/>
    <delete file="build/tmp/drop_table_list.sql" quiet="yes" failonerror="false"/>
    <delete file="build/tmp/show_tables.sql" quiet="yes" failonerror="false"/>
  </target>

  <target name="clean">
    <delete file="build/tmp/create_db.sql" quiet="yes" failonerror="false"/>
    <delete file="build/tmp/create_db_test.sql" quiet="yes" failonerror="false"/>
    <delete file="build/tmp/schema.backup.sql" quiet="yes" failonerror="false"/>
    <delete file="build/tmp/schemaPrefixChanging.sql" quiet="yes" failonerror="false"/>
    <delete file="build/tmp/schemaApplying.sql" quiet="yes" failonerror="false"/>
    <delete file="build/tmp/dumpApplying.sql" quiet="yes" failonerror="false"/>
  </target>
</project>
